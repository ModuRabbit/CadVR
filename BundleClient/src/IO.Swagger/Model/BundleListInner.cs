/* 
 * Bundle Server API
 *
 * This API enables users to download packed bundles from the bundle server.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: bruluk5w@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BundleListInner
    /// </summary>
    [DataContract]
    public partial class BundleListInner :  IEquatable<BundleListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BundleListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleListInner" /> class.
        /// </summary>
        /// <param name="UniqueId">UniqueId (required).</param>
        /// <param name="DisplayName">DisplayName (required).</param>
        public BundleListInner(string UniqueId = default(string), string DisplayName = default(string))
        {
            // to ensure "UniqueId" is required (not null)
            if (UniqueId == null)
            {
                throw new InvalidDataException("UniqueId is a required property for BundleListInner and cannot be null");
            }
            else
            {
                this.UniqueId = UniqueId;
            }
            // to ensure "DisplayName" is required (not null)
            if (DisplayName == null)
            {
                throw new InvalidDataException("DisplayName is a required property for BundleListInner and cannot be null");
            }
            else
            {
                this.DisplayName = DisplayName;
            }
        }
        
        /// <summary>
        /// Gets or Sets UniqueId
        /// </summary>
        [DataMember(Name="uniqueId", EmitDefaultValue=false)]
        public string UniqueId { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleListInner {\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BundleListInner);
        }

        /// <summary>
        /// Returns true if BundleListInner instances are equal
        /// </summary>
        /// <param name="other">Instance of BundleListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleListInner other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UniqueId == other.UniqueId ||
                    this.UniqueId != null &&
                    this.UniqueId.Equals(other.UniqueId)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UniqueId != null)
                    hash = hash * 59 + this.UniqueId.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
