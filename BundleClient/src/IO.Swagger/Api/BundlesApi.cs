/* 
 * Bundle Server API
 *
 * This API enables users to download packed bundles from the bundle server.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: bruluk5w@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBundlesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all available file names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BundleList</returns>
        BundleList GetAvailableBundles ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all available file names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BundleList</returns>
        ApiResponse<BundleList> GetAvailableBundlesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a bundle from the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>FileContents</returns>
        FileContents GetBundle (string filenameOrUniqueId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a bundle from the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>ApiResponse of FileContents</returns>
        ApiResponse<FileContents> GetBundleWithHttpInfo (string filenameOrUniqueId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about a specific bundle.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>BundleDetails</returns>
        BundleDetails GetBundleDetailsById (string uniqueId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about a specific bundle.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>ApiResponse of BundleDetails</returns>
        ApiResponse<BundleDetails> GetBundleDetailsByIdWithHttpInfo (string uniqueId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads a bundle to the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns></returns>
        void PutBundle (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads a bundle to the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutBundleWithHttpInfo (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all available file names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BundleList</returns>
        System.Threading.Tasks.Task<BundleList> GetAvailableBundlesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all available file names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BundleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BundleList>> GetAvailableBundlesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a bundle from the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>Task of FileContents</returns>
        System.Threading.Tasks.Task<FileContents> GetBundleAsync (string filenameOrUniqueId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a bundle from the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>Task of ApiResponse (FileContents)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileContents>> GetBundleAsyncWithHttpInfo (string filenameOrUniqueId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about a specific bundle.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>Task of BundleDetails</returns>
        System.Threading.Tasks.Task<BundleDetails> GetBundleDetailsByIdAsync (string uniqueId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about a specific bundle.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>Task of ApiResponse (BundleDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<BundleDetails>> GetBundleDetailsByIdAsyncWithHttpInfo (string uniqueId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads a bundle to the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutBundleAsync (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads a bundle to the server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutBundleAsyncWithHttpInfo (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BundlesApi : IBundlesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BundlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BundlesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BundlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BundlesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets all available file names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BundleList</returns>
        public BundleList GetAvailableBundles ()
        {
             ApiResponse<BundleList> localVarResponse = GetAvailableBundlesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all available file names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BundleList</returns>
        public ApiResponse< BundleList > GetAvailableBundlesWithHttpInfo ()
        {

            var localVarPath = "/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key_both) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_both")))
            {
                localVarHeaderParams["api_key_both"] = Configuration.GetApiKeyWithPrefix("api_key_both");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableBundles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BundleList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleList)));
            
        }

        /// <summary>
        ///  Gets all available file names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BundleList</returns>
        public async System.Threading.Tasks.Task<BundleList> GetAvailableBundlesAsync ()
        {
             ApiResponse<BundleList> localVarResponse = await GetAvailableBundlesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all available file names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BundleList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BundleList>> GetAvailableBundlesAsyncWithHttpInfo ()
        {

            var localVarPath = "/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key_both) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_both")))
            {
                localVarHeaderParams["api_key_both"] = Configuration.GetApiKeyWithPrefix("api_key_both");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableBundles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BundleList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleList)));
            
        }

        /// <summary>
        ///  Gets a bundle from the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>FileContents</returns>
        public FileContents GetBundle (string filenameOrUniqueId)
        {
             ApiResponse<FileContents> localVarResponse = GetBundleWithHttpInfo(filenameOrUniqueId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a bundle from the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>ApiResponse of FileContents</returns>
        public ApiResponse< FileContents > GetBundleWithHttpInfo (string filenameOrUniqueId)
        {
            // verify the required parameter 'filenameOrUniqueId' is set
            if (filenameOrUniqueId == null)
                throw new ApiException(400, "Missing required parameter 'filenameOrUniqueId' when calling BundlesApi->GetBundle");

            var localVarPath = "/bundles/{filenameOrUniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filenameOrUniqueId != null) localVarPathParams.Add("filenameOrUniqueId", Configuration.ApiClient.ParameterToString(filenameOrUniqueId)); // path parameter

            // authentication (api_key_client) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_client")))
            {
                localVarHeaderParams["api_key_client"] = Configuration.GetApiKeyWithPrefix("api_key_client");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileContents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileContents)));
            
        }

        /// <summary>
        ///  Gets a bundle from the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>Task of FileContents</returns>
        public async System.Threading.Tasks.Task<FileContents> GetBundleAsync (string filenameOrUniqueId)
        {
             ApiResponse<FileContents> localVarResponse = await GetBundleAsyncWithHttpInfo(filenameOrUniqueId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a bundle from the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The unique id of the bundle.</param>
        /// <returns>Task of ApiResponse (FileContents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileContents>> GetBundleAsyncWithHttpInfo (string filenameOrUniqueId)
        {
            // verify the required parameter 'filenameOrUniqueId' is set
            if (filenameOrUniqueId == null)
                throw new ApiException(400, "Missing required parameter 'filenameOrUniqueId' when calling BundlesApi->GetBundle");

            var localVarPath = "/bundles/{filenameOrUniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filenameOrUniqueId != null) localVarPathParams.Add("filenameOrUniqueId", Configuration.ApiClient.ParameterToString(filenameOrUniqueId)); // path parameter

            // authentication (api_key_client) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_client")))
            {
                localVarHeaderParams["api_key_client"] = Configuration.GetApiKeyWithPrefix("api_key_client");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileContents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileContents)));
            
        }

        /// <summary>
        ///  Gets details about a specific bundle.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>BundleDetails</returns>
        public BundleDetails GetBundleDetailsById (string uniqueId)
        {
             ApiResponse<BundleDetails> localVarResponse = GetBundleDetailsByIdWithHttpInfo(uniqueId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details about a specific bundle.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>ApiResponse of BundleDetails</returns>
        public ApiResponse< BundleDetails > GetBundleDetailsByIdWithHttpInfo (string uniqueId)
        {
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling BundlesApi->GetBundleDetailsById");

            var localVarPath = "/bundles/{uniqueId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uniqueId != null) localVarPathParams.Add("uniqueId", Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter

            // authentication (api_key_client) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_client")))
            {
                localVarHeaderParams["api_key_client"] = Configuration.GetApiKeyWithPrefix("api_key_client");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundleDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BundleDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleDetails)));
            
        }

        /// <summary>
        ///  Gets details about a specific bundle.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>Task of BundleDetails</returns>
        public async System.Threading.Tasks.Task<BundleDetails> GetBundleDetailsByIdAsync (string uniqueId)
        {
             ApiResponse<BundleDetails> localVarResponse = await GetBundleDetailsByIdAsyncWithHttpInfo(uniqueId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets details about a specific bundle.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">The unique base64 encoded name of the bundle.</param>
        /// <returns>Task of ApiResponse (BundleDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BundleDetails>> GetBundleDetailsByIdAsyncWithHttpInfo (string uniqueId)
        {
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling BundlesApi->GetBundleDetailsById");

            var localVarPath = "/bundles/{uniqueId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uniqueId != null) localVarPathParams.Add("uniqueId", Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter

            // authentication (api_key_client) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_client")))
            {
                localVarHeaderParams["api_key_client"] = Configuration.GetApiKeyWithPrefix("api_key_client");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundleDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BundleDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleDetails)));
            
        }

        /// <summary>
        ///  Uploads a bundle to the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns></returns>
        public void PutBundle (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents)
        {
             PutBundleWithHttpInfo(filenameOrUniqueId, bundleFileType, platforms, engines, filecontents);
        }

        /// <summary>
        ///  Uploads a bundle to the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutBundleWithHttpInfo (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents)
        {
            // verify the required parameter 'filenameOrUniqueId' is set
            if (filenameOrUniqueId == null)
                throw new ApiException(400, "Missing required parameter 'filenameOrUniqueId' when calling BundlesApi->PutBundle");
            // verify the required parameter 'bundleFileType' is set
            if (bundleFileType == null)
                throw new ApiException(400, "Missing required parameter 'bundleFileType' when calling BundlesApi->PutBundle");
            // verify the required parameter 'platforms' is set
            if (platforms == null)
                throw new ApiException(400, "Missing required parameter 'platforms' when calling BundlesApi->PutBundle");
            // verify the required parameter 'engines' is set
            if (engines == null)
                throw new ApiException(400, "Missing required parameter 'engines' when calling BundlesApi->PutBundle");
            // verify the required parameter 'filecontents' is set
            if (filecontents == null)
                throw new ApiException(400, "Missing required parameter 'filecontents' when calling BundlesApi->PutBundle");

            var localVarPath = "/bundles/{filenameOrUniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filenameOrUniqueId != null) localVarPathParams.Add("filenameOrUniqueId", Configuration.ApiClient.ParameterToString(filenameOrUniqueId)); // path parameter
            if (bundleFileType != null) localVarQueryParams.Add("bundleFileType", Configuration.ApiClient.ParameterToString(bundleFileType)); // query parameter
            if (platforms != null) localVarQueryParams.Add("platforms", Configuration.ApiClient.ParameterToString(platforms)); // query parameter
            if (engines != null) localVarQueryParams.Add("engines", Configuration.ApiClient.ParameterToString(engines)); // query parameter
            if (filecontents != null && filecontents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filecontents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filecontents; // byte array
            }

            // authentication (api_key_app) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_app")))
            {
                localVarHeaderParams["api_key_app"] = Configuration.GetApiKeyWithPrefix("api_key_app");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Uploads a bundle to the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutBundleAsync (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents)
        {
             await PutBundleAsyncWithHttpInfo(filenameOrUniqueId, bundleFileType, platforms, engines, filecontents);

        }

        /// <summary>
        ///  Uploads a bundle to the server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filenameOrUniqueId">The base64 encoded original display name of the bundle.</param>
        /// <param name="bundleFileType">The file extension of the bundle file (e.g. \&quot;pak\&quot; or \&quot;zip\&quot; etc.)</param>
        /// <param name="platforms">The os / platform this bundle is built for</param>
        /// <param name="engines">The engine/framework this bundle is built for</param>
        /// <param name="filecontents">The contents of the bundle file.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutBundleAsyncWithHttpInfo (string filenameOrUniqueId, string bundleFileType, List<string> platforms, List<string> engines, byte[] filecontents)
        {
            // verify the required parameter 'filenameOrUniqueId' is set
            if (filenameOrUniqueId == null)
                throw new ApiException(400, "Missing required parameter 'filenameOrUniqueId' when calling BundlesApi->PutBundle");
            // verify the required parameter 'bundleFileType' is set
            if (bundleFileType == null)
                throw new ApiException(400, "Missing required parameter 'bundleFileType' when calling BundlesApi->PutBundle");
            // verify the required parameter 'platforms' is set
            if (platforms == null)
                throw new ApiException(400, "Missing required parameter 'platforms' when calling BundlesApi->PutBundle");
            // verify the required parameter 'engines' is set
            if (engines == null)
                throw new ApiException(400, "Missing required parameter 'engines' when calling BundlesApi->PutBundle");
            // verify the required parameter 'filecontents' is set
            if (filecontents == null)
                throw new ApiException(400, "Missing required parameter 'filecontents' when calling BundlesApi->PutBundle");

            var localVarPath = "/bundles/{filenameOrUniqueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filenameOrUniqueId != null) localVarPathParams.Add("filenameOrUniqueId", Configuration.ApiClient.ParameterToString(filenameOrUniqueId)); // path parameter
            if (bundleFileType != null) localVarQueryParams.Add("bundleFileType", Configuration.ApiClient.ParameterToString(bundleFileType)); // query parameter
            if (platforms != null) localVarQueryParams.Add("platforms", Configuration.ApiClient.ParameterToString(platforms)); // query parameter
            if (engines != null) localVarQueryParams.Add("engines", Configuration.ApiClient.ParameterToString(engines)); // query parameter
            if (filecontents != null && filecontents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filecontents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filecontents; // byte array
            }

            // authentication (api_key_app) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key_app")))
            {
                localVarHeaderParams["api_key_app"] = Configuration.GetApiKeyWithPrefix("api_key_app");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
