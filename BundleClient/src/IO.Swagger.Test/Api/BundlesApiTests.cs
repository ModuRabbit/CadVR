/* 
 * Bundle Server API
 *
 * This API enables users to download packed bundles from the bundle server.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: bruluk5w@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BundlesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BundlesApiTests
    {
        private BundlesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BundlesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BundlesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BundlesApi
            //Assert.IsInstanceOfType(typeof(BundlesApi), instance, "instance is a BundlesApi");
        }

        
        /// <summary>
        /// Test GetAvailableBundles
        /// </summary>
        [Test]
        public void GetAvailableBundlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAvailableBundles();
            //Assert.IsInstanceOf<BundleList> (response, "response is BundleList");
        }
        
        /// <summary>
        /// Test GetBundle
        /// </summary>
        [Test]
        public void GetBundleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filenameOrUniqueId = null;
            //var response = instance.GetBundle(filenameOrUniqueId);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetBundleDetailsById
        /// </summary>
        [Test]
        public void GetBundleDetailsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uniqueId = null;
            //var response = instance.GetBundleDetailsById(uniqueId);
            //Assert.IsInstanceOf<BundleDetails> (response, "response is BundleDetails");
        }
        
        /// <summary>
        /// Test PutBundle
        /// </summary>
        [Test]
        public void PutBundleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filenameOrUniqueId = null;
            //string bundleFileType = null;
            //List<string> platforms = null;
            //List<string> engines = null;
            //byte[] filecontents = null;
            //instance.PutBundle(filenameOrUniqueId, bundleFileType, platforms, engines, filecontents);
            
        }
        
    }

}
